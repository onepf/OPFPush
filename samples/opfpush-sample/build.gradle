/*
 * Copyright 2012-2015 One Platform Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

ext {
    projectLocalPropertiesFile = project.rootProject.file('local.properties')
    projectLocalProperties = loadLocalProperties(projectLocalPropertiesFile)

    storeFile = getFile(getLocalProperty('opfpush-sample.signing'))
    storePassword = getLocalProperty('StorePassword')
    keyAlias = getLocalProperty('KeyAlias')
    keyPassword = getLocalProperty('KeyPassword')
}

def loadLocalProperties(propertiesFile) {
    def localProperties = new Properties()
    if (propertiesFile.exists()) {
        localProperties.load(propertiesFile.newDataInputStream())
    }
    return localProperties
}

def getLocalProperty(propertyName) {
    return project.projectLocalProperties.getProperty(propertyName)
}

def getFile(path) {
    if (path != null) {
        return file(path)
    }
}

def isSigningKeySpecified() {
    return project.storeFile != null && project.storePassword != null && project.keyAlias != null && project.keyPassword != null
}

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 2
        versionName "2.0"

        applicationId 'org.onepf.opfpush.pushsample'
    }

    signingConfigs {
        release {
            storeFile project.storeFile
            storePassword project.storePassword
            keyAlias project.keyAlias
            keyPassword project.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-project.txt'
            if (isSigningKeySpecified()) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        abortOnError false
        checkAllWarnings true
        warningsAsErrors true
        disable 'AllowBackup', 'ContentDescription', 'InvalidPackage', 'SelectableText', 'SpUsage'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

dependencies {
    compile 'org.onepf:opfpush-adm:0.2.0@aar'
    compile 'org.onepf:opfpush-gcm:0.2.0@aar'
    compile 'org.onepf:opfpush-nokia:0.2.0@aar'
    compile 'org.onepf:opfpush:0.2.0@aar'

    compile 'com.google.android.gms:play-services:7.0.0'
    compile 'com.nokia:push:1.0'
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'org.onepf:opfutils:0.1.20'
    provided 'com.amazon:amazon-device-messaging:1.0.1'
}
